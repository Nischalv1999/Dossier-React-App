{"version":3,"file":"main.381487aa53d0390de6aa.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;;AAaA;AAAA;;AACA;AACA;;AACA;AAEA;AACA;AAFA;AAKA;AADA;AAIA;AADA;AAIA;AADA;AAIA;AACA;AACA;AACA;AAFA;AADA;;AAYA;AAAA;;AACA;AACA;AACA;AACA;AAFA;AADA;AAOA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AACA;AACA;AACA;AACA;AACA;;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAWA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAWA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAWA;AAAA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AANA;AAAA;AAAA;AAAA;AAAA;AA5CA;AAAA;AAAA;AAAA;AAAA;AAyDA;AAAA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAYA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAxBA;AAAA;AAAA;AAAA;AAAA;AAiCA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAjCA;AAAA;AAAA;AAAA;AAAA;AA1DA;AAAA;AAAA;AAAA;AAAA;AADA;AAyGA;;AA9KA;;AAAA;AAgLA","sources":["webpack://dossier/./src/Components/Organisms/AlphaCard/AlphaCard.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { Box, Typography, TextField, InputBase, Grid } from '@mui/material'\nimport theme from '../../../theme/theme'\nimport Avatar from '../../Atoms/Avatar/Avatar'\nimport UploadImageOptions from '../../Molecules/UploadImageOptions/UploadImageOptions'\n\nimport User from '../../../../public/assets/Avatar1.svg'\nimport UploadImage from '../../../../public/assets/upload.png'\nimport LockIcon from '../../../../public/assets/lock-icon.svg'\nimport ThreeDots from '../../../../public/assets/more.png'\nimport BoxIcon from '../../../../public/assets/Boxplus-icon.svg'\n\nimport Icon from '../../Atoms/Icon/Icon'\nimport UploadDialogueBox from '../../Molecules/UploadDialogueBox/UploadDialogueBox'\nimport TypographyComponent from '../../Atoms/Typography/TypographyComponent'\nimport { makeStyles } from '@material-ui/core'\nimport { BorderVerticalOutlined } from '@material-ui/icons'\n\nconst imageGrid = {\n  paddingTop: '27px',\n  paddingLeft: '28px',\n  paddingRight: '28px',\n  backgroundColor: '#FF6161',\n  alignItems: 'center',\n  justifyContent: 'center',\n}\n\nconst box = {\n  backgroundColor: '#FFFFFF',\n  boxShadow: '0px 2px 6px rgba(0, 0, 0, 0.2)',\n  width: '676px',\n  height: '379px',\n  marginTop: '10px',\n}\n\nconst avatarBox = {\n  boxSizing: 'border-box',\n  borderRadius: '0%',\n  height: '157px',\n  width: '159px',\n  paddingTop: '8px',\n  paddingLeft: '10px',\n  marginTop:'30px'\n  \n}\n\nconst nameBox = {\n  flexDirection: 'column',\n  paddingTop: '37px',\n  paddingLeft: '25px',\n  paddingRight: '40px',\n  alignItems: 'center',\n  justifyContent: 'center',\n  display: 'flex',\n}\nconst dashedBorder = {\n  border: `2px dashed #7E64F3`,\n}\n\nconst portfolioText = {\n  fontWeight: 700,\n  fontSize: '50px',\n  alignItems: 'center',\n  display: 'flex',\n  lineHeight: '56px',\n  color: 'text.primary',\n  width: '310px',\n  height: '125px',\n}\nconst inputTextBox = {\n  paddingRight: '80px',\n  paddingTop: '38px',\n  marginLeft: '73px',\n  alignItems: 'center',\n  justifyContent: 'space-between',\n}\nconst secondText = {\n  fontWeight: 400,\n  fontSize: '12px',\n  paddingLeft: '2px',\n  marginTop: '10px',\n  lineHeight: '18px',\n  color: 'text.secondary',\n  width: '283px',\n  height: '60px',\n  alignItems: 'center',\n  display: 'flex',\n}\n\nconst imageUpload = () => {\n  document.getElementById('imageUploadButton')?.click()\n}\nconst imageOptions = [\n  {\n    src: UploadImage,\n    action: imageUpload,\n  },\n  {\n    src: LockIcon,\n  },\n  {\n    src: ThreeDots,\n  },\n  {\n    src: BoxIcon,\n  },\n]\nconst sxStyles = {\n  avatarStyle: {\n    width: '136px',\n    height: '136px',\n  },\n}\nexport type alphaCardProps = {\n  designation: string\n  heading: string\n  userName: string\n  description: string\n}\nconst AlphaCard: React.FC<alphaCardProps> = (props) => {\n  const useStyles = makeStyles((theme) => ({\n    avatar1: {\n      width: '136px',\n      height: '136px',\n    },\n  }))\n\n  const classes = useStyles()\n\n  const [progress, setProgress] = useState(0)\n  const [textEdit, setTextEdit] = useState(false)\n  const [showUploadOption, setShowUploadOption] = useState(false)\n  const [fileName, setFileName] = useState('')\n  const [userAvatar, setUserAvatar] = useState<any>(User)\n  const [heading, setHeading] = useState(props.heading)\n  const [showUploadDialogueBox, setShowDialogueBox] = useState(false)\n\n  const showOptions = (e: any) => {\n    console.log('flag before: ',showUploadOption)\n    if (showUploadOption) {\n      setShowUploadOption(false)\n    } else {\n      setShowUploadOption(true)\n    }\n    console.log('flag after: ',showUploadOption)\n\n  }\n\n  const handleOnclickTextBox = () => {\n    if (textEdit) {\n      setTextEdit(false)\n    } else {\n      setTextEdit(true)\n    }\n  }\n\n  React.useEffect(() => {\n    const timer = setInterval(() => {\n      setProgress((oldProgress) => {\n        if (oldProgress === 100) {\n          setShowDialogueBox(false)\n          return 0\n        }\n        const diff = Math.random() * 10\n        return Math.min(oldProgress + diff, 100)\n      })\n    }, 400)\n\n    return () => {\n      clearInterval(timer)\n    }\n  }, [])\n\n  const handleOnChangeImage = (event: any) => {\n    const formData = new FormData()\n\n    formData.append('File', event.target.files[0])\n    setFileName(event.target.files[0].name)\n    setShowDialogueBox(true)\n    setUserAvatar(URL.createObjectURL(event.target.files[0]))\n  }\n\n  const cancelUpload = () => {\n    setUserAvatar(User)\n    setFileName('User.png')\n    setShowDialogueBox(false)\n  }\n  return (\n    <>\n      <Grid container sx={box}>\n        <Grid item xs={4} sx={imageGrid}>\n          <Box sx={{ marginTop:'-50px' }}>\n            {showUploadOption ? (\n              <UploadImageOptions\n                options={imageOptions}\n                data-testid=\"upload-options\"\n              />\n            ) : (\n              <></>\n            )}\n          </Box>\n          {showUploadOption ? (\n            <Box sx={[avatarBox, dashedBorder]}>\n              <Avatar\n                variant=\"circular\"\n                data-testid=\"avatar\"\n                src={userAvatar}\n                onClick={(e) => showOptions(e)}\n                sx={sxStyles.avatarStyle}\n              />\n            </Box>\n          ) : (\n            <Box sx={[avatarBox]}>\n              <Avatar\n                variant=\"circular\"\n                data-testid=\"avatar\"\n                src={userAvatar}\n                onClick={(e) => showOptions(e)}\n                sx={sxStyles.avatarStyle}\n              />\n            </Box>\n          )}\n\n          <Box>\n            <input\n              accept=\"image/*\"\n              type=\"file\"\n              id=\"imageUploadButton\"\n              data-testid=\"imageUploadButton\"\n              style={{ display: 'none' }}\n              onChange={handleOnChangeImage}\n            />\n          </Box>\n\n          <Box sx={nameBox}>\n            <TypographyComponent\n              text={props.userName}\n              variant=\"caption\"\n              color=\"#FFFFFF\"\n            ></TypographyComponent>\n            <TypographyComponent\n              variant=\"caption\"\n              text={props.designation}\n              color=\"#FFFFFF\"\n            ></TypographyComponent>\n          </Box>\n        </Grid>\n        <Grid item xs={8}>\n          <Box sx={inputTextBox}>\n            {textEdit ? (\n              <InputBase\n                multiline\n                sx={[portfolioText, dashedBorder]}\n                onClick={handleOnclickTextBox}\n                value={heading}\n                data-testid=\"hover-input1\"\n                onChange={(e: any) => {\n                  setHeading(e.target.value)\n                }}\n              />\n            ) : (\n              <InputBase\n                multiline\n                sx={portfolioText}\n                onClick={handleOnclickTextBox}\n                value={heading}\n                data-testid=\"input1\"\n                onChange={(e: any) => {\n                  setHeading(e.target.value)\n                }}\n              />\n            )}\n            <InputBase\n              multiline\n              data-testid=\"input2\"\n              sx={secondText}\n              value={props.description}\n            />\n          </Box>\n          {showUploadDialogueBox ? (\n            <UploadDialogueBox\n              data-testid=\"progress-bar\"\n              imageName={fileName}\n              progress={progress}\n              onClose={cancelUpload}\n            />\n          ) : (\n            <></>\n          )}\n        </Grid>\n      </Grid>\n    </>\n  )\n}\n\nexport default AlphaCard\n"],"names":[],"sourceRoot":""}