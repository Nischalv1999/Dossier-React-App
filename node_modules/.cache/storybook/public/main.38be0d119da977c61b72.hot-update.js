"use strict";
globalThis["webpackHotUpdatedossier"]("main",{

/***/ "./src/Components/Atoms/Avatar/Avatar.tsx":
/*!************************************************!*\
  !*** ./src/Components/Atoms/Avatar/Avatar.tsx ***!
  \************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _mui_material__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @mui/material */ "./node_modules/@mui/material/Avatar/Avatar.js");
/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ "./node_modules/react/jsx-dev-runtime.js");
/* provided dependency */ var __react_refresh_utils__ = __webpack_require__(/*! ./node_modules/@pmmmwh/react-refresh-webpack-plugin/lib/runtime/RefreshUtils.js */ "./node_modules/@pmmmwh/react-refresh-webpack-plugin/lib/runtime/RefreshUtils.js");
/* provided dependency */ var __react_refresh_error_overlay__ = __webpack_require__(/*! ./node_modules/@pmmmwh/react-refresh-webpack-plugin/overlay/index.js */ "./node_modules/@pmmmwh/react-refresh-webpack-plugin/overlay/index.js");
__webpack_require__.$Refresh$.runtime = __webpack_require__(/*! ./node_modules/react-refresh/runtime.js */ "./node_modules/react-refresh/runtime.js");

var _jsxFileName = "/home/nischv/Documents/React/Dossier/dossier/src/Components/Atoms/Avatar/Avatar.tsx";



const ava = {
  width: '136px',
  height: '136px'
};

const Avatar = props => {
  return /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {
    children: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_mui_material__WEBPACK_IMPORTED_MODULE_1__["default"], { ...props,
      className: props.classname,
      sx: {
        width: '136px',
        height: '136px'
      },
      variant: props.variant,
      src: props.src
    }, void 0, false, {
      fileName: _jsxFileName,
      lineNumber: 14,
      columnNumber: 7
    }, undefined)
  }, void 0, false);
};

_c = Avatar;
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Avatar);

var _c;

__webpack_require__.$Refresh$.register(_c, "Avatar");

const $ReactRefreshModuleId$ = __webpack_require__.$Refresh$.moduleId;
const $ReactRefreshCurrentExports$ = __react_refresh_utils__.getModuleExports(
	$ReactRefreshModuleId$
);

function $ReactRefreshModuleRuntime$(exports) {
	if (true) {
		let errorOverlay;
		if (typeof __react_refresh_error_overlay__ !== 'undefined') {
			errorOverlay = __react_refresh_error_overlay__;
		}
		let testMode;
		if (typeof __react_refresh_test__ !== 'undefined') {
			testMode = __react_refresh_test__;
		}
		return __react_refresh_utils__.executeRuntime(
			exports,
			$ReactRefreshModuleId$,
			module.hot,
			errorOverlay,
			testMode
		);
	}
}

if (typeof Promise !== 'undefined' && $ReactRefreshCurrentExports$ instanceof Promise) {
	$ReactRefreshCurrentExports$.then($ReactRefreshModuleRuntime$);
} else {
	$ReactRefreshModuleRuntime$($ReactRefreshCurrentExports$);
}
try {
    // @ts-ignore
    Avatar.displayName = "Avatar";
    // @ts-ignore
    Avatar.__docgenInfo = { "description": "", "displayName": "Avatar", "props": { "variant": { "defaultValue": null, "description": "The shape of the avatar.", "name": "variant", "required": false, "type": { "name": "enum", "value": [{ "value": "\"circular\"" }, { "value": "\"rounded\"" }, { "value": "\"square\"" }] } }, "src": { "defaultValue": null, "description": "The `src` attribute for the `img` element.", "name": "src", "required": false, "type": { "name": "any" } }, "classname": { "defaultValue": null, "description": "", "name": "classname", "required": false, "type": { "name": "string" } }, "alt": { "defaultValue": null, "description": "Used in combination with `src` or `srcSet` to\nprovide an alt attribute for the rendered `img` element.", "name": "alt", "required": false, "type": { "name": "string" } }, "children": { "defaultValue": null, "description": "Used to render icon or text elements inside the Avatar if `src` is not set.\nThis can be an element, or just a string.", "name": "children", "required": false, "type": { "name": "ReactNode" } }, "classes": { "defaultValue": null, "description": "Override or extend the styles applied to the component.", "name": "classes", "required": false, "type": { "name": "(Partial<AvatarClasses> & Partial<ClassNameMap<never>>)" } }, "imgProps": { "defaultValue": null, "description": "[Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img#attributes) applied to the `img` element if the component is used to display an image.\nIt can be used to listen for the loading error event.", "name": "imgProps", "required": false, "type": { "name": "(ImgHTMLAttributes<HTMLImageElement> & { sx?: SxProps<Theme>; })" } }, "sizes": { "defaultValue": null, "description": "The `sizes` attribute for the `img` element.", "name": "sizes", "required": false, "type": { "name": "string" } }, "srcSet": { "defaultValue": null, "description": "The `srcSet` attribute for the `img` element.\nUse this attribute for responsive image display.", "name": "srcSet", "required": false, "type": { "name": "string" } }, "sx": { "defaultValue": null, "description": "The system prop that allows defining system overrides as well as additional CSS styles.", "name": "sx", "required": false, "type": { "name": "SxProps<Theme>" } }, "ref": { "defaultValue": null, "description": "", "name": "ref", "required": false, "type": { "name": "((instance: HTMLDivElement | null) => void) | RefObject<HTMLDivElement> | null" } } } };
    // @ts-ignore
    if (typeof STORYBOOK_REACT_CLASSES !== "undefined")
        // @ts-ignore
        STORYBOOK_REACT_CLASSES["src/Components/Atoms/Avatar/Avatar.tsx#Avatar"] = { docgenInfo: Avatar.__docgenInfo, name: "Avatar", path: "src/Components/Atoms/Avatar/Avatar.tsx#Avatar" };
}
catch (__react_docgen_typescript_loader_error) { }

/***/ })

});
//# sourceMappingURL=main.38be0d119da977c61b72.hot-update.js.map